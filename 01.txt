0103

CISCO IN AN HOUR IV

Network Layer
  Transmission of data btwn 2 sep networks (eg school nw <-> digital ocean nw)
  I N T E R N E T
  Connectionless: unconcerned whether or not data was sent successfully
  addressing, routing, packet forwarding

  Internet Protocal (IP) addresses
    IPv4: 4 byte address [0-255].[0-255].[0-255].[0-255]
                          octet (8 bit)
    routing is made easier by having ip addresses distributed in blocks

0104

CISCO IN AN HOUR V

an ip doesn't have to be identical throughout run
packets will be forwarded by network equipments
  $ traceroute google.com
  : all of devices MY data has to go through to reach google (network host)
  : each step is called a "hop"

Network layer (cont.)
  data is broken into packets(IPv4)
  <header info><packet length><fragment info><time-to-live><protocol><header checksum><src><dest><...><data>
		       		20 - 65,535B
  h.i.: packet type (v4/6), header length..
  fragment info: full payloads may be broken up; contains total # pf fragments, which fragment
  time-to-live: maximum hops before packet DEATH
    ->identical to how traceroute works: incrementing t2l
  protocol: TCP/UDP/...
  <...>: optional info
  src, dest: 4 bytes each, IPv4 addresses

the problem with IPv4: running out of ip address
IPv6
  address space: 2^32 -> 2^128
  8 groups of 4 hexadecimal digits
    87ab : 301c : 73ab : 8731...
      this is how you write it, not how it is rep in computer

    leading 0s are ignored
    0000 replaced with ::, but only once in an address

  IPv4 address can be represented with 5 0-groups, 1 f-group(96 bits) followed by original v4 address (32 bits)
       :: ffff : 149.89.150.100
  some incompatibility exist: cannot be interchanged
  jumbograms: increase MTU to ~4.3 billion (2^32)
  
0105

CISCO IN AN HOUR VI

TRANSPORT LAYER
  computer to computer connection over a network
  unconcernde with the individual hops of layer 3 traffic

  every destination address has multiple PORTS.
  Ports is an addition to ip address which specifies services
  65535 ports: <1024 are well known, reserved ports, regulated by the Internet Assigned Numbers Authority (IANA).
  port 22 is ssh, port 80 is HTTP, 443 is HTTPS...

  two main protocols for data transfer in this 4th layer
  TCP / UdP

Transmission Control Protocol
  reliable connection, guarantees delivery of data
  data is a continious stream that arrives in the order it is sent (which may not be true in the network layer)
  tcp is sometimes referred to as STREAM. tcp connection will ensure data is sent in order and not partially lost.
  3 way handshake to establish connection
    server 'binds' to a port and waits
      1. client sends a SYN msg to server
      2. server sends the client a SYN_ACK msg
      3. client sends an ACK msg to the server

User Datagram Protocol
  does not require an explicit connection
  not a continuous stream; transimitted in distincted 'bursts' of data (datagrams). they may be dropped or received out of order.
  assumes that any kind of error checking is handled at a leter level.
  is more efficient. no handshakes. or if software wishes to handle piecing broken data together itself
  standard for streaming media and video game is UDP.
  
0106

VII
remaining layers:
 5. session
 6. presentation
 7. application

  session layer represents end-to-end connections in a program (SOCKETS)
  presentation represents how programs package transmitted data
      how do we form a valid web request?
  application rep the program that user interact with

<sys/socket.h, sys/types.h>
  network connection between two PROGRAMS.
  a socket has 2 ends, each one consisting of an IP Address/Port PAIR.
  1. create the socket
  2. bind to address and port
  3. listen/initiate a connection
  4. send/receive data

socket(int domain, int type, int protocol);
    domain: AF_INET (IPv4) (pf_inet on man page)
    type: SOCK_STREAM(tcp) or SOCK_DGRAM(udp)
    protocol: if set to 0, OS will set to correct protocol
              this is a combination of domain and type setting

bind( sd, address, address length);
    return 0 or -1
    if i am a client and i want to connect to server, i will want to bind my socket to the server and ..what port?
    the server, in a resting state, will bind to its own ip address so it can listen. the server might have multiple valid ip addresses.
    every computer has its loopback address with which it connects to itself.
    server has at least one external ip address.

    address: pointer to struct sockaddr_in
        sin_family: address domain (eg AF_INET)
        sin_addr: IP address in *binary*; INADDR_ANY (any incoming connection)
		  works differently in client server
		  we want the octets in binary (32 bits)
		     	      	     	sin_addr
                  inet_aton(string, address variable);
		  		    #include <arpa/inet.h>
                    convert string representing ip address to the correct format and place it in the second param
	sin_port: can't just set it = to 8000..
		..how does computers represnet numbers
		short s = 260;
		method 1, Big endian (most significant byte first): 00000001 00000100
		method 2, Little endian: 00000100 00000001 (school lab comp)
		network standard: big endian

		htons( int );

0110
Recap:
1. create socket
2. bind to ip/port
3. accept/connect
4. transmit data

sockaddr is the generic version of sockaddr_in(for IPv4)
...
