110131

directory

ctime( &(sb1.st_mtime)); 

sprintf(size, "%d KB", s/1000);
    combination of printf and strcpy

Q: return pointer? return variable storing pointer?

*dont forget the terminatin null

char * get_perm_string(mode_t mode ){
     mode_t perms[3];
     int i;
     char *perm_string = (char *)malloc(10);
     perm_string[9] = 0;
     perms[0] = ( mode & 0b111000000 ) >> 6; //bitshifting
     perms[1] = ( mode & 0b111000) >> 3;
     perms[2] = ( mode & 0b111);
... // not the best way
}

Directories
    A *nix dir is a file containing the names of the files within the directory along with basic info like file type
    moving files into/out of directory means chaning dir file not actually moving any data

opendir - <dirent.h>
    open a directory file
    will not change cwd, only allows program to read content of dir
    opendir(<PATH>);
    return pointer to directory stream (DIR *)
closedir
    closedir(<DIR STREAM>);
readir(<DS>);
	returns a pointer to next entry in ds or NULL
struct dirent - <sys/types.h>
       dir struct, contain dir info
       data members
       	    d_name: Name of a file
	    d_type: file type as int


110316

getcwd - <unistd.h>
    get current working dir(<str buff>, <size>);
    in absolute path
    from where the program is called, not live
    	 char path[100];
	 path[99] = 0;
	 getcwd(path, 99);

chdir - <unistd.h>
    chdir(<PATH>);
	change the wd of the program! does not get popped or anything
	returns 0 if succ, -1 (errno) if not

command line args (tb...)
    int main( int argc, char *argv[] )
    program name (e.g. ./a.out) is the first command line arg
    argc - number of arguments
    argv - array of char *
"he llo" = he\ llo

scanf - <stdio.h>
    scanf( <FORMAT STRING>, <V1>, <V2>... );
    
    int x;
    printf("\nset the x:");
    scanf("&d", &x);
		^pt
    	your input needs to match the format!
    no need to worry about overflow here-
    BUT STRINGS ARE PROBLEMATIC. POSSIBLE BUFFER OVERFLOW.
    e.g. declare s[10] and enter longer

110416

fgets - <stdio.h>
    read in from file stream, store in string
    fgets( <dest>, <bytes>, <file pt> );
        reads at most <bytes>-1
    FILE POINTER - more complex than file descriptor
    	 stdin is a FILE * variable
    >>stops<< at newline, end of file, or reach byte limit
    	      NEWLINE CHR IS KEPT AS PART OF STRING
	      SHOULD DEAL WITH ACCORDINGLY
    will append NULL after always
NEVER USE GETS

processes
$ ps
TIME is NOT how long CMD has been running
     how long it took in processor
TTY: terminal session identifier
PID: process identification number
     *pid 1 is init
refreshes when rebootps

$ ps -a
all processes attached to terminal sessions (not ALL)
$ ps -ax
ALL

(specific to linux)
/$ ls/proc
   all process running has a folder in /proc


  
110716
are your processes running? then you should go out and catch them

every running program is a process
a process can create subprocesses, which are just processes

a processor can handle 1 process per cycle/core
"multitasking" is an illusion         

getpid() - <unistd.h>
getppid()
   parent process id

signals
  a limited way of sending info to a process
  $ kill <PID>
    	 sends signal 15 (SIGTERM) to PID
  $ kill -signal <PID>
    	 the signal KILL (9) cannot be intercepted
*CTRL C = signal (2) SIGINT
$ kill -11 <PID>
Segmentation fault: 11

stop means suspend, diff from terminate

$ killall [-<SIGNAL>] <PROCESS NAME>
signal all p with pname

in C:
kill(<PID>, <SIGNAL>); //return 0 on succ
#include <signal.h>

v must be this header!
static void sighandler(int signo){ //replace default sighandler
       if ( signo == SIGNIT )
       	  printf("nice try");
}
int main(){
    signal(SIGINT, sighandler); //pass func name as param, is all good
    signal(SIG..., sighandler);
    ...
    return 0;
}

* sleep(1); //waits 1 sec


161110
what the fork

fork() - <unistd.h>
creates separate process based on current one
	new process is child
	original is parent
child process is a duplicate of parent process. it is COPIED, including stack and heap mem and the file table.
>>returns 0 to child and the childs pid to the parent or -1 (errno)
	  f = fork();
	  if (f == 0)
	     printf("\tim a child");
	  else 
	     printf("f: %d\n", f);
if parent process end before child, child (orphan process) pid is 1.

int f = fork();

ALL CODE AFTER FORK() IS REPEATED BY BOTH PROGRAM though u can separate some instructions. the child won't run code before fork() but many things are the same.
parents won't always exit "on the right time".


161115
wait for it,,

exit(0) allows you to terminate from func that's not main

a thread is a separate executable entity similar to a child process, except a thread i snot a standalone process. it does not have its own memory space. it shares its (running) parent's memory. it cannot exist on its own.

sleep takes time but you don't know how long the other process is going to take. so we have:

wait - <unistd.h>
stops parent proces from running until any child has provided STATUS INFO to parent via SIGNAL.
returns pid of child that exited or -1 (errno).

else {
    int status, r; //you don't need to malloc
    r = wait( &status ); //address to an int
    //status info provided by child
    printf("wait returned: %d, status: %d", r, status);
    ...WEXITSTATUS(status);

161117

char * command[3];
     this is an array of pointers
     | 8000 | 8010 | NULL |
       	 v
     | l | s | NULL |
     8000

command[0] = "ls"; ?
command[1] = "-l";
command[2] = 0;

execvp( command[0], command );


char line[] = "cho-gi-wa";
strsep - <string.h>
       used for parsing a string with a common delimiter
       strsep( <SOURCE>, <DELIMITER> );
       parses only 1 chunk at a time by replacing with NULL and returning front chunk
       source string set to newest head
char *s = line;
char *p;
p = strsep( &s, "-"); //why the address operator if it's already pointer

while ( s ) {
      command[i] = strsep( &s, " " );
      i++;
}
>> command[i] = 0; <<


161122

no need to fget strip newline.
*(strchr(line, '\n')) = NULL;
	strchr returns pointer
	dereference pointer set it to NULL

while ((cmd[i] = strsep(&s," ")))
      i++;

command line redirection
    <command> > <file>
    redir stdout to file, overwrite file
    formating might not exactly be the same (ls change into vert list)
    
    >>
    append instead of overwrite

    cat <no-arg> will display stdin: C^D to send end of file chr

    cat > foo
    cheap text editor
    but if you hit newline you can't go back

    2> (2 is stderr fd!)
    stderr to a file
    
    &>
    stdout and stderr

    <
    redirect stdin from file


    | (pipe)
    redirect stdout from one command to stdin of next
    ls | wc

redirection in c programs
    dup2(fd1, fd2)
    duplicate behavior 1 to 2
    redirects 2 to 1
    lose all reference to fd2

    dup( fd )
    dup existing entry in file table
    returns new fd for the duplicate entry

    dup(1);
    dup2(3,1);
    dup2(4,1);


161129

sharnig is caring
dn: seems like var declared in parent and then mod in child would not be mod in parent.

shared memory - <sys/shm.h>, <sys/ipc.h>, <sys/types.h>
       - segment of heap mem that can be accessed by multiple processes
       - accessed via some key knwon by any process that needs it
       - does NOT get released when program exists
the 5 operations
    1. create segment (happens once)
    2. access seg (happens once per proc) //created is also accessed
       //not the same as using
    3. attach the seg to a var (once per proc)
    4. detach seg from var (once per proc)
    5. rem seg (juz once) //gone 4ever

shmget( key, size, flags )
    create or access
    returns a shared memory descriptor or -1 errno
    key: identifier
    size: how much mem to req
    flags: includes permissions for seg, Combine with bitwise
    	   IPC_CREAT (inter-process communications, btw)
	   	     if seg is new set value to all 0
	   IPC_EXCL
		fail if seg already exists and creat is on: to protect overwrite
    int sd;
    sd = shmget( 24601, 1024, IPC_CREAT | 0664);

fuddlin'
shmat( desc, address, flags );
     return pointer to segment or -1
     desc: return value of shmget!
     address: if 0, OS provide appropraite address (auto)
     flags: usually 0 but
     	    SHM_RDONLY: read only

see share.c
    attached variable does NOT have same address but same value

